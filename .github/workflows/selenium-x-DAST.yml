name: Selenium Tests with OWASP ZAP DAST

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  selenium-zap-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create a temporary index.php
      run: |
        echo "<?php echo 'Server is running!'; ?>" > index.php

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y php php-cli php-mysql unzip google-chrome-stable mariadb-server mariadb-client curl

    - name: Start MariaDB Service
      run: |
        sudo systemctl start mariadb
        sudo systemctl enable mariadb
        sudo systemctl restart mariadb

    - name: Setup Database
      run: |
        sudo mysql --user=root --execute="CREATE DATABASE IF NOT EXISTS damncrud;"
        sudo mysql --user=root damncrud < db/damncrud.sql
        sudo mysql --user=root --execute="GRANT ALL PRIVILEGES ON damncrud.* TO 'root'@'localhost' IDENTIFIED BY '';"
        sudo mysql --user=root --execute="FLUSH PRIVILEGES;"

    - name: Verify Database Setup
      run: |
        sudo mysql -u root -e "USE damncrud; SHOW TABLES;"

    - name: Start PHP server
      run: |
        nohup php -S 127.0.0.1:8000 -t . > server.log 2>&1 &
        sleep 5
        echo "✅ Checking server log:"
        cat server.log

    - name: Wait for server to start
      run: |
        for i in {1..10}; do
          curl -s http://127.0.0.1:8000/ && echo "✅ Server is up!" && exit 0
          echo "⏳ Waiting for server..."
          sleep 2
        done
        echo "❌ Server failed to start!"
        exit 1

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Python dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-xdist selenium requests

    - name: Run Selenium Login Test
      run: |
        python -c '
        from selenium import webdriver
        from selenium.webdriver.common.by import By
        from selenium.webdriver.common.keys import Keys
        import time

        driver = webdriver.Chrome()
        driver.get("http://127.0.0.1:8000/login.php")
        time.sleep(2)

        driver.find_element(By.NAME, "username").send_keys("admin")
        driver.find_element(By.NAME, "password").send_keys("nimda666!")
        driver.find_element(By.XPATH, "//button[contains(text(), \"OK I\'m sign in\")]").click()
        time.sleep(3)

        assert "dashboard" in driver.current_url, "Login failed!"
        print("✅ Admin login successful!")
        driver.quit()
        '

    - name: Start OWASP ZAP Daemon
      run: |
        docker run -d --name zap -p 8080:8080 -p 8090:8090 owasp/zap2docker-stable zap.sh -daemon -port 8080 -config api.disablekey=true

    - name: Run OWASP ZAP DAST Scan with Auth
      run: |
        docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-full-scan.py \
          -t http://127.0.0.1:8000 \
          -x zap_report.xml \
          -r zap_report.html \
          -z "-config replacer.full_list(0).description='auth' \
              -config replacer.full_list(0).enabled=true \
              -config replacer.full_list(0).matchtype='REQ_BODY_STR' \
              -config replacer.full_list(0).matchstr='username=admin&password=nimda666!' \
              -config replacer.full_list(0).replacement='username=admin&password=nimda666!' \
              -config replacer.full_list(0).regex=false"

    - name: Run OWASP ZAP Authenticated Scan
      run: |
        docker exec zap zap-cli quick-scan --self-contained --start-options "-config api.disablekey=true" http://127.0.0.1:8000

    - name: Generate ZAP Report
      run: |
        docker exec zap zap-cli report -o zap_report.html -f html

    - name: Upload ZAP Security Report
      uses: actions/upload-artifact@v4
      with:
        name: ZAP Security Report
        path: zap_report.html

    - name: Check for High-Risk Vulnerabilities
      run: |
        if grep -q 'High' zap_report.html; then
          echo "❌ High-risk vulnerabilities found!"
          exit 1
        else
          echo "✅ No high-risk vulnerabilities found."
        fi
